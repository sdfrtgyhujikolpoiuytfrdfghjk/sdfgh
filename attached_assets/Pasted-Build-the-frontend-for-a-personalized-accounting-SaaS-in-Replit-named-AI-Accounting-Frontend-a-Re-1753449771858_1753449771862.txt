Build the frontend for a personalized accounting SaaS in Replit, named 'AI-Accounting-Frontend'—a React app that's the easiest, Notion-inspired UI with a minimalist black/gray base and subtle purple accents (no overdoing for clean professionalism), ample white space to reduce distractions, block-based modularity, and subtle animations for high-end feel, automating tasks like onboarding with AI guidance and multi-client filtering to save accountants hours on drudgery while scaling their practice.

Do ONLY the frontend—no backend code, APIs, or server setup; use mocks/stubs for data/API calls (e.g., local JSON for clients/insights) and assume backend endpoints exist (e.g., POST /clients for onboarding).

Tech stack: React 18, Tailwind CSS (custom theme: black #0A0A0A base, gray #F5F5F5 cards, purple #4B0082 accents), React Router v6 for navigation, React Query v5 for data fetching/caching (mock queries), Chart.js/react-chartjs-2 for charts, Socket.io-client for real-time (mock alerts), Framer Motion for animations, react-beautiful-dnd for drag-drop, react-confetti for wins, lucide-react for icons, zod/react-hook-form for forms, @hookform/resolvers for validation. Structure: /src/components (ui/Button, Sidebar, Header, AIChatBubble), /pages (Login, Onboarding, Dashboard, etc.), /utils (api.ts with mocks, theme.ts), /hooks (useConfetti, useToast), App.tsx for routes, index.tsx entry. Add package.json with deps/scripts (vite dev/build), tailwind.config.js for theme.

Global elements: Persistent AI chat bubble (bottom-right, expands popover with OpenAI mocks for contextual help), sidebar nav (black with purple hover icons for pages), header with client selector dropdown (mocks GET /clients, updates page data), confetti on automations (e.g., client onboarded).

Pages (clean, white-space-focused, purple accents on buttons/insights):
- Login: Centered card (black bg, gray form, purple button), email/password inputs (eye icon, remember me), "Forgot Password?" modal (email input, mock POST /reset), "Sign In" button (mock POST /auth/login, confetti/redirect to Dashboard on success).
- Onboarding Wizard: Stepper (4 steps, purple progress), Step 1: Client basics form (name/type/tax ID, AI mock suggestions), Step 2: Integrations (Plaid/Stripe buttons, Gusto key input with "Test Connection" spinner/mock success confetti), Step 3: Drag-drop uploads (CSVs/PDFs, progress bar for AI mock parsing), Step 4: Review grid (AI mock flags), "Next/Finish" buttons (mock POST /clients, confetti on finish).
- Dashboard: Draggable grid widgets (cash flow chart, overdue table, AI insights card with "Review" modal/mock flags), client dropdown filter (mock GET /insights?clientId), notification bell (mock Socket.io alerts), "Add Client" button (redirect to Onboarding), "Save Layout" button (local storage/mock PATCH).
- Invoicing: Table (owed by project, status badges), pie chart, AI suggestion banner (mock "Overdue—remind?" with button), "Create Invoice" modal (AI mock auto-fill, "Send" mock POST /invoices/send with confetti), "Batch Remind" (mock POST /batch-remind, confetti), row "Edit/Mark Paid" modals (mock PATCH).
- Expenses: Upload zone (drag-drop with progress/AI mock categorization confetti), table with flags ("Resolve" modal mock POST /resolve), "Approve Selected" button (mock PATCH /approve, confetti), filters/search.
- Payroll: Table (employees/pay/status), AI forecast card (chart/mock insights), "Run Payroll" button (mock POST /run with progress/confetti), "Generate Payslip" (mock GET PDF download, confetti), "Add Employee" modal (mock POST /employees).
- Reports: Filters dropdowns, preview with charts/AI summary (mock OpenAI insights), "Generate Report" button (mock POST /generate), "Export PDF" (mock GET PDF, confetti), "Share" modal (mock POST /share).
- Settings: Tabbed (Preferences toggles, Integrations list with "Reconnect" buttons/mock confetti, Support AI chat full-window), "Save Changes" button (mock PATCH, confetti), "Logout" (clear storage/redirect).

Optimize: Mobile-responsive (Tailwind grids), lazy load components, React Query for mocks/caching, Framer Motion for hovers/fades, Zod for form validation. Test each page (mock login, onboard client with confetti, etc.). Output updated tree, run app, and confirm no errors—focus on frontend only, no backend.